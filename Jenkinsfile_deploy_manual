pipeline {
    agent any

    parameters {
        choice(name: 'environment', choices: ['main', 'dev'], description: 'deploying environmanet')
        choice(name: 'tag', choices: ['v1.0', 'v1.1'], description: 'tag')
    }
    
    environment {
        registryDocker = "orcsin/lab3"
        registryCredential = 'docker_id'
        imageReference = ''
        dockerImage = ''
    }

    //triggers{ cron('H/1 * * * *') }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checkout'
		        checkout scm
            }
        }
        stage('Build') {
            steps {
                echo 'Building'
                sh 'chmod +x ./scripts/build.sh'
		        sh 'scripts/build.sh'
            }
        }
        stage('Test') {
            steps {
		        echo 'Testing'
                sh 'chmod +x ./scripts/test.sh'
		        sh 'scripts/test.sh'
            }
        }
        stage('Build docker image') {
            steps {
                echo 'Build docker image'
		        script {
                    imageReference = "node${params.environment}:${params.tag}"
                    dockerImage = docker.build imageReference
			    }
            }
        }
/*
	    stage('Scan Docker Image for Vulnerabilities') {
		    steps {
		    	script {
			    	def vulnerabilities = sh(script: "trivy image --exit-code 0 --severity HIGH,MEDIUM,LOW --no-progress ${imageReference}", returnStdout: true).trim()
                    echo "Vulnerability report:\n${vulnerabilities}"
			    }
		    }
	    }
*/
        
        stage('Deploy') {
            steps {
                echo 'Deploying Example'
                
	    	    script {
                    def run_containers = sh(returnStdout: true, script: 'docker container ps -q').replaceAll("\n", " ")
                    def all_containers = sh(returnStdout: true, script: 'docker container ps -aq').replaceAll("\n", " ")
                    
                    if (run_containers){
                        sh "docker container kill ${run_containers}"
                    }

                    if (all_containers){
                        sh "docker container rm ${all_containers}"
                    }

                    sh "docker run -d --expose 3000 -p 3000:3000 node${params.environment}:${params.tag}" 
                }
	    	}
        }  
    }
}
